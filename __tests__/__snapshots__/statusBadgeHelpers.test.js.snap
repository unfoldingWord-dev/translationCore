// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests statusBadgeHelpers.getGlyphIcons() test with all status badge glphys 1`] = `
Array [
  <Glyphicon
    bsClass="glyphicon"
    glyph="invalidatefd"
    style={undefined}
  />,
  <Glyphicon
    bsClass="glyphicon"
    glyph="bookmark"
    style={
      Object {
        "color": "var(--reverse-color)",
        "display": "initial",
      }
    }
  />,
  <Glyphicon
    bsClass="glyphicon"
    glyph="ok"
    style={
      Object {
        "color": "var(--completed-color)",
        "display": "initial",
      }
    }
  />,
  <Glyphicon
    bsClass="glyphicon"
    glyph="pencil"
    style={
      Object {
        "color": "var(--reverse-color)",
        "display": "initial",
      }
    }
  />,
  <Glyphicon
    bsClass="glyphicon"
    glyph="comment"
    style={
      Object {
        "color": "var(--highlight-color)",
        "display": "initial",
      }
    }
  />,
]
`;

exports[`Tests statusBadgeHelpers.getGlyphIcons() test with an unstyled glphy 1`] = `
Array [
  <Glyphicon
    bsClass="glyphicon"
    glyph="unstyled"
    style={undefined}
  />,
]
`;

exports[`Tests statusBadgeHelpers.getGlyphIcons() test with glphys = null 1`] = `
Array [
  <Glyphicon
    bsClass="glyphicon"
    glyph=""
    style={
      Object {
        "color": "none",
        "display": "initial",
        "paddingLeft": "15px",
      }
    }
  />,
]
`;

exports[`Tests statusBadgeHelpers.getGlyphIcons() test with no parameters passed 1`] = `
Array [
  <Glyphicon
    bsClass="glyphicon"
    glyph=""
    style={
      Object {
        "color": "none",
        "display": "initial",
        "paddingLeft": "15px",
      }
    }
  />,
]
`;

exports[`Tests statusBadgeHelpers.getGlyphIcons() test with one glphy 1`] = `
Array [
  <Glyphicon
    bsClass="glyphicon"
    glyph="pencil"
    style={
      Object {
        "color": "var(--reverse-color)",
        "display": "initial",
      }
    }
  />,
]
`;

exports[`Tests statusBadgeHelpers.getStatusBadge() test with all status badge glphys 1`] = `
<div
  className="status-badge-wrapper"
>
  <div
    className="status-badge"
    data-class="status-tooltip"
    data-delay-hide="100"
    data-effect="float"
    data-html="true"
    data-offset="{'bottom': -5, 'right': 5}"
    data-place="bottom"
    data-tip="<span style=\\"color:var(--completed-color);display:initial\\" class=\\"glyphicon glyphicon-ok\\" data-reactroot=\\"\\"></span><span style=\\"color:var(--reverse-color);display:initial\\" class=\\"glyphicon glyphicon-pencil\\" data-reactroot=\\"\\"></span><span style=\\"color:var(--highlight-color);display:initial\\" class=\\"glyphicon glyphicon-comment\\" data-reactroot=\\"\\"></span>"
  >
    <Glyphicon
      bsClass="glyphicon"
      glyph="bookmark"
      style={
        Object {
          "color": "var(--reverse-color)",
          "display": "initial",
        }
      }
    />
    <div
      className="badge"
    >
      4
    </div>
  </div>
  <ReactTooltip
    insecure={true}
    resizeHide={true}
    wrapper="div"
  />
</div>
`;

exports[`Tests statusBadgeHelpers.getStatusBadge() test with an unstyled glphy 1`] = `
<div
  className="status-badge"
>
  <Glyphicon
    bsClass="glyphicon"
    glyph="unstyled"
    style={undefined}
  />
</div>
`;

exports[`Tests statusBadgeHelpers.getStatusBadge() test with glphys = null 1`] = `
<div
  className="status-badge"
>
  <Glyphicon
    bsClass="glyphicon"
    glyph=""
    style={
      Object {
        "color": "none",
        "display": "initial",
        "paddingLeft": "15px",
      }
    }
  />
</div>
`;

exports[`Tests statusBadgeHelpers.getStatusBadge() test with no parameters passed 1`] = `
<div
  className="status-badge"
>
  <Glyphicon
    bsClass="glyphicon"
    glyph=""
    style={
      Object {
        "color": "none",
        "display": "initial",
        "paddingLeft": "15px",
      }
    }
  />
</div>
`;

exports[`Tests statusBadgeHelpers.getStatusBadge() test with one glphy 1`] = `
<div
  className="status-badge"
>
  <Glyphicon
    bsClass="glyphicon"
    glyph="pencil"
    style={
      Object {
        "color": "var(--reverse-color)",
        "display": "initial",
      }
    }
  />
</div>
`;
